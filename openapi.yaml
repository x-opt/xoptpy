openapi: 3.0.3
info:
  title: AI Registry API
  description: API for managing AI modules and tools with versioning, dependencies, and search capabilities
  version: 1.0.0
  contact:
    name: AI Registry Team
  license:
    name: MIT

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /health:
    get:
      summary: Health check
      description: Check the health status of the API and database connection
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  database:
                    type: boolean
                    example: true
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/modules/{namespace}/{name}/versions:
    get:
      summary: Get module versions
      description: Retrieve all versions of a specific module
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: List of module versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionInfo'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/modules/{namespace}/{name}/versions/{version}:
    post:
      summary: Upload module version
      description: Upload a new version of a module with its manifest
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manifest'
      responses:
        '201':
          description: Module version created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleVersionResponse'
        '400':
          description: Invalid manifest JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Version already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/modules/{namespace}/{name}/versions/{version}/manifest:
    get:
      summary: Get module manifest
      description: Retrieve the manifest for a specific module version
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
      responses:
        '200':
          description: Module manifest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '404':
          description: Module version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/modules/{namespace}/{name}/versions/{version}/files/{path}:
    get:
      summary: Get module file
      description: Download a specific file from a module version
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
        - name: path
          in: path
          required: true
          schema:
            type: string
          description: File path within the module
          example: "src/main.py"
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/modules/{namespace}/{name}/versions/{version}/dependencies:
    get:
      summary: Get module dependencies
      description: Retrieve dependencies for a specific module version
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
      responses:
        '200':
          description: List of dependencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dependency'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/modules/{namespace}/{name}/usage-stats:
    get:
      summary: Get module usage statistics
      description: Retrieve download and usage statistics for a module
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: Usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageStats'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tools/{namespace}/{name}/versions:
    get:
      summary: Get tool versions
      description: Retrieve all versions of a specific tool
      tags:
        - Tools
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: List of tool versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionInfo'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tools/{namespace}/{name}/versions/{version}:
    post:
      summary: Upload tool version
      description: Upload a new version of a tool with its manifest
      tags:
        - Tools
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manifest'
      responses:
        '201':
          description: Tool version created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolVersionResponse'
        '400':
          description: Invalid manifest JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Version already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tools/{namespace}/{name}/versions/{version}/manifest:
    get:
      summary: Get tool manifest
      description: Retrieve the manifest for a specific tool version
      tags:
        - Tools
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
      responses:
        '200':
          description: Tool manifest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
        '404':
          description: Tool version not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tools/{namespace}/{name}/versions/{version}/files/{path}:
    get:
      summary: Get tool file
      description: Download a specific file from a tool version
      tags:
        - Tools
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
        - name: path
          in: path
          required: true
          schema:
            type: string
          description: File path within the tool
          example: "src/main.py"
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tools/{namespace}/{name}/versions/{version}/dependencies:
    get:
      summary: Get tool dependencies
      description: Retrieve dependencies for a specific tool version
      tags:
        - Tools
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Version'
      responses:
        '200':
          description: List of dependencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dependency'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/tools/{namespace}/{name}/usage-stats:
    get:
      summary: Get tool usage statistics
      description: Retrieve download and usage statistics for a tool
      tags:
        - Tools
      parameters:
        - $ref: '#/components/parameters/Namespace'
        - $ref: '#/components/parameters/Name'
      responses:
        '200':
          description: Usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageStats'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/search:
    get:
      summary: Search components
      description: Search for modules and tools by name or description
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
          example: "sentiment"
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [module, tool]
          description: Filter by component type (searches both if omitted)
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResult'
        '400':
          description: Missing required query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  parameters:
    Namespace:
      name: namespace
      in: path
      required: true
      schema:
        type: string
      description: Component namespace
      example: "nlp"
    
    Name:
      name: name
      in: path
      required: true
      schema:
        type: string
      description: Component name
      example: "basic-sentiment"
    
    Version:
      name: version
      in: path
      required: true
      schema:
        type: string
      description: Component version
      example: "1.0.0"

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
      example:
        error: "Module version not found"

    VersionInfo:
      type: object
      properties:
        version:
          type: string
          example: "1.0.0"
        download_count:
          type: integer
          example: 123
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
      required:
        - version
        - download_count
        - created_at

    ModuleVersionResponse:
      type: object
      properties:
        module_id:
          type: integer
          example: 1
        version_id:
          type: integer
          example: 2
        version:
          type: string
          example: "1.0.0"
      required:
        - module_id
        - version_id
        - version

    ToolVersionResponse:
      type: object
      properties:
        tool_id:
          type: integer
          example: 1
        version_id:
          type: integer
          example: 2
        version:
          type: string
          example: "1.0.0"
      required:
        - tool_id
        - version_id
        - version

    Dependency:
      type: object
      properties:
        dependency_namespace:
          type: string
          example: "utils"
        dependency_name:
          type: string
          example: "text-cleaner"
        dependency_version:
          type: string
          example: "1.0.0"
      required:
        - dependency_namespace
        - dependency_name
        - dependency_version

    UsageStats:
      type: object
      properties:
        total_downloads:
          type: integer
          example: 500
        version_stats:
          type: object
          additionalProperties:
            type: integer
          example:
            "1.0.0": 300
            "1.1.0": 200
        recent_activity:
          type: array
          items:
            $ref: '#/components/schemas/UsageActivityEntry'
      required:
        - total_downloads
        - version_stats
        - recent_activity

    UsageActivityEntry:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2024-01-01T10:00:00Z"
        downloads:
          type: integer
          example: 25
        version:
          type: string
          example: "1.0.0"
      required:
        - date
        - downloads
        - version

    SearchResult:
      type: object
      properties:
        type:
          type: string
          enum: [module, tool]
          example: "module"
        namespace:
          type: string
          example: "nlp"
        name:
          type: string
          example: "basic-sentiment"
        description:
          type: string
          example: "Basic sentiment analysis using keyword matching"
        tags:
          type: array
          items:
            type: string
          example: ["sentiment", "nlp", "analysis"]
        versions:
          type: array
          items:
            type: string
          example: ["1.0.0", "1.1.0", "1.2.0"]
      required:
        - type
        - namespace
        - name
        - description
        - tags
        - versions

    Manifest:
      type: object
      description: Component manifest (module or tool specification)
      properties:
        apiVersion:
          type: string
          example: "ai-registry/v1"
        kind:
          type: string
          enum: [module, tool]
          example: "module"
        metadata:
          type: object
          properties:
            name:
              type: string
              example: "basic-sentiment"
            namespace:
              type: string
              example: "nlp"
            version:
              type: string
              example: "1.0.0"
            description:
              type: string
              example: "Basic sentiment analysis using keyword matching"
            author:
              type: string
              example: "nlp-team@company.com"
            license:
              type: string
              example: "MIT"
            tags:
              type: array
              items:
                type: string
              example: ["sentiment", "nlp", "analysis"]
          required:
            - name
            - namespace
            - version
        spec:
          type: object
          properties:
            interface:
              type: object
              properties:
                input_schema:
                  type: object
                  description: JSON Schema for input validation
                output_schema:
                  type: object
                  description: JSON Schema for output validation
            implementation:
              type: object
              properties:
                type:
                  type: string
                  enum: [function, react_agent]
                  example: "function"
                entry_point:
                  type: string
                  example: "./basic_sentiment.py:analyze_sentiment"
                requirements:
                  type: array
                  items:
                    type: string
                  example: ["regex>=2022.3.0"]
                reasoning_engine:
                  type: string
                  example: "openai-gpt4"
            dependencies:
              type: object
              properties:
                modules:
                  type: array
                  items:
                    type: string
                  example: ["utils/text-cleaner@1.0.0"]
                tools:
                  type: array
                  items:
                    type: string
                  example: ["utils/data-validator@2.1.0"]
            tunable:
              type: object
              properties:
                parameters:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      type:
                        type: string
                        example: "array"
                      description:
                        type: string
                        example: "List of positive sentiment words"
                      default_value:
                        example: ["good", "great", "excellent"]
                optimization_targets:
                  type: array
                  items:
                    type: string
                  example: ["accuracy"]
                tuning_method:
                  type: string
                  example: "manual"
          required:
            - interface
            - implementation
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      example:
        apiVersion: "ai-registry/v1"
        kind: "module"
        metadata:
          name: "basic-sentiment"
          namespace: "nlp"
          version: "1.0.0"
          description: "Basic sentiment analysis using keyword matching"
          author: "nlp-team@company.com"
          license: "MIT"
          tags: ["sentiment", "nlp", "analysis"]
        spec:
          interface:
            input_schema:
              type: "object"
              properties:
                text:
                  type: "string"
              required: ["text"]
            output_schema:
              type: "object"
              properties:
                sentiment:
                  type: "string"
                  enum: ["positive", "negative", "neutral"]
                confidence:
                  type: "number"
              required: ["sentiment", "confidence"]
          implementation:
            type: "function"
            entry_point: "./basic_sentiment.py:analyze_sentiment"
            requirements: ["regex>=2022.3.0"]

tags:
  - name: Health
    description: Health check endpoints
  - name: Modules
    description: AI module management operations
  - name: Tools
    description: AI tool management operations
  - name: Search
    description: Search operations for modules and tools